#compdef bee


__git_apply_whitespace_strategies ()
{
  declare -a strategies

  strategies=(
    'nowarn:turn off the trailing-whitespace warning'
    'warn:output trailing-whitespace warning, but apply patch'
    'fix:output trailing-whitespace warning and strip trailing whitespace'
    'error:output trailing-whitespace warning and refuse to apply patch'
    'error-all:same as "error", but output warnings for all files')

  _describe -t strategies 'trailing-whitespace resolution strategy' strategies $*
}


_bee()
{
  local context state state_descr line curcontext="$curcontext"
  typeset -A opt_args

  local ret=1

  _arguments -C \
    '(- 1 *)--help[show usage]'\
    '1:command:->command'\
    '*::args:->args' && ret=0

  case $state in
    (command)
      if [[ -n $beetop ]]; then
        local commands;
        commands=(
          'abandon:Permanently abandon a developmtent branch'
          'add:Run git add command in the current directory'
          'branches:View current topic branches'
          'bundles:View active bundles'
          'checkout:Check out a branch for development'
          'commit:Perform commit to git repository and upload binary files to artifactory server'
          'config:Creates .ssh/config and .gitconfig file in user home directory'
          'download:Download and checkout a change from the review system'
          'forall:Executes shell command for every repository'
          'help:Display detailed help on a command'
          'init:Initialize bee in the current directory'
          'log:Run "git log" command in current directory'
          'ls:List files tracked by bee'
          'manifest:Export manifest to standard output or file'
          'prune:Prune (delete) already merged topics'
          'rm:Run git rm command in the current directory'
          'start:Start a new branch for development'
		  'startsms:(IMC) Start a new branch for development, based on an SMS ticket'
		  'switch/create:fetch manifest and clone (update) workarea projects (combination of init and sync commands'
		  'stash:Stash the changes in a dirty working directory away'
          'status:Show the working tree status'
          'sync:Update working tree to the latest revision'
          'track:Rebase branch created with git on mainline branch and track it wih bee'
          'upload:Upload changes for code review'
          'version:Display the version of bee'
        )
        _describe -t commands 'command' commands && ret=0
      else
        local commands;
        commands=(
          'init:Install bee in the current working directory'
          'config:Set up or update Git and SSH configuration'
          'help:Display detailed help on a command'
        )
        _describe -t commands 'command' commands && ret=0
      fi
      ;;
    (args)
      case $words[1] in
        (branch | branches)
          # TODO : list available projects and add them in list to feed compadd with
          _arguments  : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                     ': :__bee_projects' \
                      && ret=0
         ;;
        (abandon)
          # TODO : list available projects and add them in list to feed compadd with
          _arguments  : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                     ':branch name:__bee_branch' \
                     ': :__bee_projects'\
                      && ret=0
          ;;
        (checkout)
          # TODO : list available projects and add them in list to feed compadd with
          _arguments  : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                     ':branch name:__bee_branch' \
                     ': :__bee_projects'\
                     && ret=0
          ;;
        (init)
          _arguments : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                     "(-q --quiet)"{-q,--quiet}"[be quiet]" \
                     "(-u --manifest-url)"{-u,--manifest-url=}"[manifest repository location]":url:__bee_url_prompt \
                     "(-b --manifest-branch)"{-b,--manifest-branch=}"[manifest branch or revision]":branch:__bee_branch\
                     "(-l --local-manifest)"{-l,--local-manifest=}"[local manifest pathname]":'local_manifest:_path_files -g "*.xml"'\
                     "(-m --manifest-name)"{-m,--manifest-name=}"[initial manifest file]":manifest_name:__bee_manifest_name\
                     "(--mirror)--mirror[mirror the forrest]"\
                     "(--reference)--reference=[location of mirror directory]":dir:_dirs\
                     "(--depth)--depth=[create a shallow clone with given depth; see git clone]":depth:__bee_depth_prompt\
                     "(-g --group=)"{-g,--group=}"[restrict manifest projects to ones with a specified group]":group:_group\
                     "(-p --platform=)"{-p,--platform=}"[restrict manifest projects to ones with a specified platform group(auto|all|none|linux|darwin|...)]":platform:"(auto all none linux darwin)"\
                     "(--bee-url)--bee-url=[bee repository location]":url:__bee_url_prompt\
                     "(--bee-branch)--bee-branch[bee branch or revision]":branch_or_rev:__bee__bee_branch_or_rev\
                     "(--no-bee-verify)--no-bee-verify[do not verify bee source code]"\
                     "(--config-name)--config-name[Always prompt for name/e-mail]"\
                     && ret=0
          ;;
        (start)
          _arguments : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                     "(--all)--all=[begin branch in all projects]"\
                    ':branch name:__bee_new__bee_branch_name' \
                    ':projects:__bee_projects_or_all' \
                    && ret=0
          ;;
        (rebase)
          _arguments : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                     "(-i --interactive)"{-i,--interactive}"[interactive rebase (single project only)]: :__bee_projects" \
                     "(-f --force-rebase)"{-f,--force-rebase}"[Pass --force-rebase to git rebase]" \
                     "(--no-ff)--no-ff=[Pass --no-ff to git rebase]"\
                     "(-q --quiet)"{-q,--quiet}"[Pass --quiet to git rebase]" \
                     "(--autosquash)--no-ff[Pass --autosquash to git rebase]"\
                     "(--whitespace=)--whitespace=[Pass --whitespace to git rebase]: :__git_apply_whitespace_strategies"\
                     "(--auto-stash)--auto-stash[Stash local modifications before starting]"\
                     && ret=0
          ;;
        (checkout)
          _arguments : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                    ':branch name:__git_branch_names' \
                    ':projects:__bee_projects' \
                    && ret=0
          ;;
        (list)
          _arguments : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                    && ret=0
          ;;
        (status)
          _arguments : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                     "(-j --jobs)"{-j,--jobs}"[number of projects to check simultaneously]" \
                    ':projects:__bee_projects' \
                    && ret=0
          ;;
        (sync)
          _arguments : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                     "(--no-force-broken)--no-force-broken[stop sync if a project fails to sync (probably because of permissions)]" \
                     "(-l --local-only)"{-l,--local-only}"[only update working tree, don't fetch]" \
                     "(-n --network-only)"{-n,--network-branch}"[fetch only, don't update working tree]" \
                     "(-d --detach)"{-d,--detach}"[detach projects back to manifest revision]" \
                     "(-c --current-branch)"{-c,--current-branch}"[fetch only current branch from server]" \
                     "(-q --quiet)"{-q,--quiet}"[be more quiet]" \
                     "(-j --jobs=)"{-j,--jobs=}"[projects to fetch simultaneously (default 1) (limited to 5)]:projects to fetch simultaneously (default 1) (limited to 5)" \
                     "(-m --manifest-name=)"{-m,--manifest-name=}"[temporary manifest to use for this sync]:manifest xml file:_files -g *.xml" \
                     "(--no-clone-bundle)--no-clone-bundle[disable use of /clone.bundle on HTTP/HTTPS]" \
                     "(-s --smart-sync)"{-s,--smart-sync=}"[smart sync using manifest from a known tag]:tag:" \
                     '(--no-bee-verify)--no-bee-verify[do not verify bee source code]' \
                     ': :__bee_projects' \
                     && ret=0
          ;;
        (upload)
          _arguments : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                     "(-t)-t[Send local branch name to Gerrit Code Review]" \
                     "(--re= --reviewers=)"{--re=,--reviewers=}"[Request reviews from these people]:Request reviews from these people:" \
                     "(--cc=)--cc=[Also send email to these email addresses.]:email addresses:_email_addresses" \
                     "(--br=)--br=[Branch to upload.]:branch:__bee_branch" \
                     "(--cbr --current-branch)"{--cbr,--current-branch}"[Upload current git branch]" \
                     "(-d --draft)"{-d,--draft}"[If specified, upload as a draft.]" \
                     "(--verify --no-verify)--no-verify[Do not run the upload hook.]" \
                     '(--verify --no-verify)--verify[Run the upload hook without prompting]' \
                     ': :__bee_projects' \
                     && ret=0
          ;;
        (forall)
          _arguments : \
                     "(-h --help)"{-h,--help}"[Show help]" \
                     "(-v --verbose)"{-v,--verbose}"[Show command error messages]" \
                     '(-p)-p[Show project headers before output]' \
                     ': :__bee_projects_mandatory' \
                     "(-c --command -h --help -v --verbose -p)"{-c,--command}"[Command (and arguments) to execute]" \
                     && ret=0
          ;;
        *)
          ret=0
      esac
      ;;
  esac

  return $ret
}

__bee_reviewers()
{
 # _message -e url 'reviewers'
}

__bee_url_prompt()
{
  _message -e url 'url'
}

__bee_manifest_name()
{
  _message -e manifest_name 'manifest name'
}

_group()
{
  _message -e group 'group'
}

__bee_branch()
{
  #_message -e branch 'bee branch'
  branches=($(bee branches| grep '|' | cut -d' ' -f1))
  _describe -t branches 'Select bee branch' branches
}

__bee__bee_branch_or_rev()
{
  _message -e branch_or_rev 'bee branch or revision'
}

__bee_depth_prompt()
{
  _message -e depth 'depth'
}

__bee_projects()
{
  _message -e depth 'Optional option : <projects>...'
  projects=($(bee-projects | cut -d' ' -f1))
  _describe -t projects 'Select projects (keep empty for selecting all projects)' projects
}

__bee_projects_mandatory()
{
  projects=($(bee-projects | cut -d' ' -f1))
  #_describe -t projects 'Select projects to apply commands' projects
  _values -s ' ' "Select projects to apply commands" $projects
}

__bee_new__bee_branch_name()
{
  branches=($(bee branches| grep '|' | cut -d' ' -f1))
  _describe "" branches
  _message -e "branch name" 'Enter new branch name or select an existing bee branch'
}

__bee_projects_or_all()
{
  #_message -e depth '[--all | <project>...]'

  projects=(--all $(bee-projects | cut -d' ' -f1))
  _describe -t projects 'Select projects or --all' projects
  _describe -t --all 'All projects'
}

_bee "$@"
return $?

